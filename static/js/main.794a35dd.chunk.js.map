{"version":3,"sources":["logo.svg","ActorModel.js","Actor.js","components/SearchBox.js","gallery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ActorModel","FirstName","LastName","Birthday","Image","IMDBLink","this","Date","getFullYear","Number","split","Actor","props","Card","Img","variant","src","actor","Body","Title","href","target","actorAge","Component","Gallery","e","searchActors","setState","actorSearchResultStrings","value","state","selectedEventKey","actors","data","map","actoritem","console","log","bind","sortSelected","event","newactors","slice","sort","a","b","x","toLowerCase","y","filteredActors","res","i","length","lowFirst","lowLast","lowsearch","startsWith","push","lowsearchFirst","lowsearchLast","actorCards","index","Col","md","key","Container","Badge","onChange","Form","Control","className","type","placeholder","Row","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.794a35dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","class ActorModel {\r\n  constructor(FirstName, LastName, Birthday, Image, IMDBLink) {\r\n    {\r\n      this.FirstName = FirstName;\r\n      this.LastName = LastName;\r\n      this.Birthday = Birthday;\r\n      this.Image = Image;\r\n      this.IMDBLink = IMDBLink;\r\n    }\r\n  }\r\n\r\n  actorAge() {\r\n    const currentYear = new Date().getFullYear();\r\n    const yearOfBorn = Number(this.Birthday.split(\"-\")[0]);\r\n    return currentYear - yearOfBorn;\r\n  }\r\n}\r\nexport default ActorModel;\r\n","import React, { Component } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport ActorModel from \"./ActorModel.js\";\r\n\r\nexport default class Actor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    /*   this.actorAge = this.actorAge.bind(this); */\r\n  }\r\n  //     actorAge(){\r\n  //         const currentYear = new Date().getFullYear();\r\n  //         const yearOfBorn = Number(this.props.actor.Birthday.split(\"-\")[0]);\r\n  //         return(currentYear-yearOfBorn);\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Card>\r\n          <Card.Img variant=\"top\" src={this.props.actor.Image} />\r\n          <Card.Body>\r\n            <Card.Title>\r\n              <a href={this.props.actor.IMDBLink} target=\"_blank\">\r\n                {\" \"}\r\n                {this.props.actor.FirstName} {this.props.actor.LastName}{\" \"}\r\n              </a>{\" \"}\r\n            </Card.Title>\r\n            <Card.Title> Age is: {this.props.actor.actorAge()}</Card.Title>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport { Form, ListGroup } from 'react-bootstrap';\nimport './SearchBox.css';\n\n\n\n// Props\n// searchPlaceholder. a string for the placeholder to show in the search input\n// results. an array of results that the componenet will render\n// onSearchChange. callback function to parent notifying that the search text has changed\n// onSelectedResult. callback function to parent notifying on the selected result (index from the results prop)\n// State\n// searchText\nexport default class SearchBox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchText: \"\"\n        }\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n     /*   this.handleSelection = this.handleSelection.bind(this); */\n    }\n\n    handleInputChange(ev) {\n        const newSearchText = ev.target.value\n\n        this.setState({\n            searchText: newSearchText\n        });\n\n        this.props.onSearchChange(newSearchText);\n    }\n/*\n    handleSelection(ev) {\n        this.props.onSelectedResult(parseInt(ev.target.getAttribute(\"data-index\")));\n        this.setState({\n            searchText: \"\"\n        })\n    }\n*/\n    render() {\n        const { searchPlaceholder, results } = this.props;\n        const { searchText } = this.state;\n\n {/*      const listGroupItems = results.map((result, index) => <ListGroup.Item key={index} data-index={index} action onClick={this.handleSelection}>{result}</ListGroup.Item>); \n    */}    \n        // let listGroupItems = [];\n        // for (var i = 0; i < results.length; i++) {\n        //     listGroupItems.push(<ListGroup.Item>{results[i]}</ListGroup.Item>)\n        // }\n\n        return (\n            <div className=\"search-box\">\n                <Form.Control type=\"text\" placeholder={searchPlaceholder} value={searchText} onChange={this.handleInputChange}/>\n                <ListGroup className=\"search-results\">\n                    {/*{listGroupItems} */}\n                </ListGroup>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\r\nimport data from \"./actorsData.json\";\r\nimport Actor from \"./Actor\";\r\nimport SearchBox from \"./components/SearchBox\";\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  InputGroup,\r\n  FormControl,\r\n  Form,\r\n  Badge,\r\n  Button,\r\n  Dropdown\r\n} from \"react-bootstrap\";\r\nimport ActorModel from \"./ActorModel.js\";\r\n\r\nclass Gallery extends Component {\r\n  constructor(props, e) {\r\n    super(props);\r\n    this.state = {\r\n      /*actorSearchResults: [],*/\r\n      actorSearchResultStrings: \"\",\r\n      selectedEventKey: null,\r\n      value: \"\",\r\n      actors: data.map(\r\n        actoritem =>\r\n          new ActorModel(\r\n            actoritem.FirstName,\r\n            actoritem.LastName,\r\n            actoritem.Birthday,\r\n            actoritem.Image,\r\n            actoritem.IMDBLink\r\n          )\r\n      )\r\n\r\n      /*carsData.map(plainCar => new CarModel(plainCar))*/\r\n\r\n      /*actors: [] */\r\n    };\r\n    console.log(this.state.actors[1]);\r\n    this.searchActors = this.searchActors.bind(this);\r\n    this.sortSelected = this.sortSelected.bind(this);\r\n  }\r\n\r\n  searchActors = e => {\r\n    this.setState({\r\n      actorSearchResultStrings: e.target.value\r\n    });\r\n  };\r\n\r\n  sortSelected(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { actorSearchResultStrings, actors } = this.state;\r\n    const { value } = this.state;\r\n    let sortOptions = [\"FirstName\", \"LastName\", \"Age\"];\r\n    const newactors = actors.slice();\r\n    // filter\r\n    if (value === \"FirstName\" || value === \"LastName\") {\r\n      newactors.sort(function(a, b) {\r\n        var x = a[value].toLowerCase();\r\n        var y = b[value].toLowerCase();\r\n        if (x < y) {\r\n          return -1;\r\n        }\r\n        if (x > y) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n    } else if (value === \"Age\") {\r\n      newactors.sort(function(a, b) {\r\n        return a.actorAge() - b.actorAge();\r\n      });\r\n    }\r\n    let filteredActors = [];\r\n    if (actorSearchResultStrings === \"\") {\r\n      filteredActors = newactors;\r\n    } else {\r\n      var res = actorSearchResultStrings.split(\" \");\r\n\r\n      for (var i = 0; i < newactors.length; i++) {\r\n        let lowFirst = newactors[i].FirstName.toLowerCase();\r\n\r\n        let lowLast = newactors[i].LastName.toLowerCase();\r\n        if (res.length === 1) {\r\n          let lowsearch = res[0].toLowerCase();\r\n          if (lowFirst.startsWith(lowsearch) || lowLast.startsWith(lowsearch)) {\r\n            filteredActors.push(newactors[i]);\r\n          }\r\n        } else {\r\n          let lowsearchFirst = res[0].toLowerCase();\r\n          let lowsearchLast = res[1].toLowerCase();\r\n          if (\r\n            lowFirst === lowsearchFirst &&\r\n            lowLast.startsWith(lowsearchLast)\r\n          ) {\r\n            filteredActors.push(newactors[i]);\r\n          }\r\n        }\r\n      }\r\n    } /*else if (value === \"Age\"){\r\n      for (let i=0;i<filteredActors.length;i++){\r\n        for (let j=0;j<i;j++){\r\n          if (this.actor.actorAge()\r\n        }\r\n      }\r\n\r\n\r\n    }*/ /*else if (value === \"notSorted\") {\r\n      filteredActors = [];\r\n      for (let i = 0; i < unSortedArray.length; i++) {\r\n        filteredActors.push(unSortedArray[i]);\r\n      }\r\n    } */\r\n    /* if (value === \"\") {\r\n      var unSortedArray = [];\r\n      for (let i = 0; i < filteredActors.length; i++) {\r\n        unSortedArray.push(filteredActors[i]);\r\n      }\r\n    } */\r\n    /*if (value === \"\" || value === \"unSorted\") {\r\n    } else  */ const actorCards = filteredActors.map(\r\n      (actor, index) => (\r\n        <Col md={4} key={index}>\r\n          <Actor actor={actor} />\r\n        </Col>\r\n      )\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Container>\r\n          {/*  <SearchBox searchPlaceholder=\"Search Actor\" results={actorSearchResultStrings}\r\n                        onSearchChange={this.searchActors}  /> */}\r\n          <h1>\r\n            <Badge variant=\"secondary\">Actors From IMDB</Badge>\r\n          </h1>\r\n          <select value={value} onChange={this.sortSelected}>\r\n            <option value=\"unSorted\">unSorted</option>\r\n            <option value=\"FirstName\">Sorted By FirstName</option>\r\n            <option value=\"LastName\">Sorted By LastName</option>\r\n            <option value=\"Age\">Sorted By Age</option>\r\n          </select>\r\n          {/* <Button variant=\"success\" OnClick={this.sortActors}>\r\n            Sort\r\n                    </Button> */}\r\n          <Form.Control\r\n            className=\"searchAct\"\r\n            type=\"text\"\r\n            placeholder=\"type First Name and/or Last Name to filter \"\r\n            value={actorSearchResultStrings}\r\n            onChange={this.searchActors}\r\n          />\r\n          <Row>{actorCards}</Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gallery;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ActoreGallery from \"./gallery\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ActoreGallery/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}